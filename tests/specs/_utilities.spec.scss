// SASS unittests for utilities functions

// Dependencies
@import '../../core/utilities';

// Contains helpers for unittesting like should/expect abstractions
@import '../test-helpers';

@include describe("Hill Utilities Functions") {

    @include it("[getFirstChar] should return the first char of a string") {
        $value    : getFirstChar('>small');
        $expected : '>';

        @include shouldBeEqual($value, $expected);
    }

    @include it("[removeFirstChar] should remove the first char of a string") {
        $value    : removeFirstChar('>small');
        $expected : 'small';

        @include shouldBeEqual($value, $expected);
    }

    @include it("[equalOnce] should compare a given char with others and return true if its equal") {
        $value   : '>';
        $matcher : '>';

        @include shouldBeTruthy(equalOnce($value, $matcher));
    }

    @include it("[equalOnce] should compare a given char with others and return false if its not equal") {
        $value   : '>';
        $matcher : '<';

        @include shouldBeFalsy(equalOnce($value, $matcher));
    }

    @include it("[equalOnce] should compare mutiple chars") {
        $value    : '<';
        $matcher1 : '>';
        $matcher2 : '<';

        @include shouldBeTruthy(equalOnce($value, $matcher1, $matcher2));
    }

    @include it("[stripUnit] should remove px unit characters") {
        $value    : 100px;
        $expected : 100;

        @include shouldBeEqual(stripUnit($value), $expected);
    }

    @include it("[stripUnit] should remove rem unit characters") {
        $value    : 10rem;
        $expected : 10;

        @include shouldBeEqual(stripUnit($value), $expected);
    }

    @include it("[mapGetPrevious] should get previous item") {
        $map      : (1: 'a', 2: 'b',
                     3: 'c', 4: 'd');
        $expected : 'b';

        @include shouldBeEqual(mapGetPrevious($map, 3), $expected);

        $expected : 'c';
        @include shouldBeEqual(mapGetPrevious($map, 4), $expected);
    }

    @include it("[mapGetPrevious] should get null, if no prevoius item exists") {
        $map      : (1: 'a', 2: 'b');
        $expected : null;

        @include shouldBeEqual(mapGetPrevious($map, 1), $expected);
    }

    @include it("[mapGetNext] should get next item") {
        $map      : (1: 'a', 2: 'b',
                     3: 'c', 4: 'd');
        $expected : 'c';

        @include shouldBeEqual(mapGetNext($map, 2), $expected);

        $expected : 'd';
        @include shouldBeEqual(mapGetNext($map, 3), $expected);
    }

    @include it("[mapGetNext] should get null, if no next item exists") {
        $map      : (1: 'a', 2: 'b');
        $expected : null;

        @include shouldBeEqual(mapGetNext($map, 2), $expected);
    }

    @include it("[mapGetFirstKey] should get first item") {
        $map      : (1: 'a', 2: 'b');
        $expected : 1;

        @include shouldBeEqual(mapGetFirstKey($map), $expected);
    }

    @include it("[mapGetLastKey] should get last item") {
        $map      : (1: 'a', 2: 'b');
        $expected : 2;

        @include shouldBeEqual(mapGetLastKey($map), $expected);
    }
}
