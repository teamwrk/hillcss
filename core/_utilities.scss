//
// Mixin to generate a JSON string from given maps
//
// @param maps
// @returns
//     font-family: {THE JSON};
//
// @examples
//     $foo1: ('test1', 'aaa'),
//            ('test2', 'bbb');
//     $foo2: ('test3', 'ccc'),
//            ('test4', 'ddd');
//
// usage:
//     .selector {
//         @include maps-to-json($foo1, $foo2);
//     }
//
// output:
//     .selector {
//         font-family: "{'test1': 'aaa',
//                        'test2': 'bbb',
//                        'test3': 'ccc',
//                        'test4': 'ddd'}";
//     }
//
// @mixin maps-to-json ($maps...) {
//     $json: '{';

//     @for $i from 1 through length($maps) {
//         $map: nth($maps, $i);

//         @if ($i != 1) {
//             $json: $json + ', ';
//         }

//         @for $j from 1 through length($map) {
//             $item: nth($map, $j);

//             @if ($j != 1) {
//                 $json: $json + ', ';
//             }

//             $json: $json + '"' + nth($item, 1) + '":"' + nth($item, 2) + '"';
//         }
//     }

//     $json: $json + '}';

//     // We use the *font-family* property as JSON storage.
//     // The *content* alternative does not work for IE8+, because the IE returns
//     // 'normal' as value.
//     font-family: $json;
// }

//
// Return the first character of a string
// @param  {String} $string
// @return {String}
//
@function getFirstChar ($string) {
    @if (type-of($string) == string) {
        @return str_slice($string, 1, 1);
    } @else {
        @return null;
    }
}

//
// Remove the first character of a string
// and return it
// @param  {String} $string
// @return {String}
//
@function removeFirstChar ($string) {
    @return str_slice($string, 2, -(length($string)));
}

//
// Returns if a string is equal to a list of
// matcher Strings
// @param  {String} $string         String to test
// @param  {List}   $matchers...    List of Strings to test against
// @return {Boolean}                True or false if it matches.
//
@function equalOnce ($string, $matchers...) {
    @each $matcher in $matchers {
        @if ($string == $matcher) {
            @return true;
        }
    }

    @return false;
}

//
// Returns the number without unit. E.g. 30px -> 30
// @param  {String} $val
// @return {Number}
//
@function stripUnit($val) {
  // Borrowed from Zurb Foundation _globals.scss
  @return $val / ($val * 0 + 1);
}

//
// Calculates and returns a rem value based on pixel input
//
// Examples:
// width: rem(200px);       // width: 12.5rem;
// margin: rem(10) rem(20); // margin: 0.625rem 1.25rem;
//
// @param {String} $pixel
// @param {String} $base Optional rem value to get the right scope
// @return {String} rem value
//
@function rem($pixel, $base: $hill-text-root) {
    @return stripUnit($pixel) / stripUnit($base) * 1rem;
}

//
// Gets the previous item from given map relative to given item
// @param  {Object}  $map     Map with keys and values
// @param  {String}  $fromKey From key
// @return {Boolean} Return the previous item, relative to given from item.
//
@function map-get-previous($map, $fromKey) {
    $currentIndex: 0;

    @each $map-key, $map-value in $map {
        $currentIndex: $currentIndex + 1;

        @if (($map-key == $fromKey) and ($currentIndex > 1)) {
            @return nth(nth($map, $currentIndex - 1), 2);
        }
    }

    @return null;
}

//
// Gets the next item from given map relative to given item
// @param  {Object}  $map     Map with keys and values
// @param  {String}  $fromKey From key
// @return {Boolean} Return the next item, relative to given from item.
//
@function map-get-next($map, $fromKey) {
    $currentIndex: 0;

    @each $map-key, $map-value in $map {
        $currentIndex: $currentIndex + 1;

        @if (($map-key == $fromKey) and ($currentIndex < length($map))) {
            @return nth(nth($map, $currentIndex + 1), 2);
        }
    }

    @return null;
}

//
// Gets the first key of the given map
// @param  {Object} $map Map with keys and values
// @return {String} Return the first key name of the map.
//
@function map-get-first-key ($map) {
    @return nth(nth($map, 1), 1);
}

//
// Gets the last key of the given map
// @param  {Object} $map Map with keys and values
// @return {String} Return the last key name of the map.
//
@function map-get-last-key ($map) {
    @return nth(nth($map, length($map)), 1);
}
