//
// NOTE: This helpers can used in your code to access the hill functionality/api.
//       Hillcss itself depends on this helpers, so do not change this functions
//

//
// Return the font size of the given key
// @param   {String} $property
// @return  {String} Font size
// @Example
//           .example {
//               font-size: textIs('small')
//           }
//
@function textIs ($property) {
    @return map-get($hill-text-sizes, $property);
}



//
// Return content with the representive media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @Example
//           // Simple MediaQuery for small screens only
//           .example {
//               color: blue;
//
//               @include deviceIs(small) {
//                   color: red;
//               }
//           }
//
@mixin deviceIs ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @if($hill-layout-classes-as-breaktpoints == false) {
            // Defaults for first parameter and condition
            $breakpoint: map-get($hill-layout-breakpoints, $device);

            @if (mapGetFirstKey($hill-layout-breakpoints) == $device) {
                @media (max-width: #{$breakpoint}) {
                    @content;
                }
            } @else {
                @media (min-width: #{mapGetPrevious($hill-layout-breakpoints, $device) + 1}) and
                       (max-width: #{$breakpoint}) {
                    @content;
                }
            }

        } @else {
            .device-is--#{$device} {
                @content;
            }
        }
    }
}



//
// Return content with the representive min width media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @Example
//           // Simple MediaQuery for min small devices
//           .example {
//               @include deviceMin(small) {
//                   color: red;
//               }
//           }
//
@mixin deviceMin ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (min-width: #{map-get($hill-layout-breakpoints, $device) + 1}) {
            @content;
        }
    }
}



//
// Return content with the representive max width media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @Example
//           // Simple MediaQuery for max large devices
//           .example {
//               @include deviceMax(large) {
//                   color: red;
//               }
//           }
//
@mixin deviceMax ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (max-width: #{map-get($hill-layout-breakpoints, $device)}) {
            @content;
        }
    }
}



//
// Return content with the representive media query wrap between two breakpoints
// @param  {String} $deviceMin The min device breakpoint definition
// @param  {String} $deviceMax The max device breakpoint definition
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @Example
//           // Simple MediaQuery for max large devices
//           .example {
//               @include deviceBetween(medium, large) {
//                   color: red;
//               }
//           }
//
@mixin deviceBetween ($deviceMin, $deviceMax) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (min-width: #{map-get($hill-layout-breakpoints, $deviceMin) + 1})
            and (max-width: #{map-get($hill-layout-breakpoints, $deviceMax)}) {
            @content;
        }
    }
}



//
// Calculates and returns a rem value based on pixel input
//
// Examples:
// width: rem(200px);       // width: 12.5rem;
// margin: rem(10) rem(20); // margin: 0.625rem 1.25rem;
//
// @param {String} $pixel
// @param {String} $base Optional rem value to get the right scope
// @return {String} rem value
//
@function rem($pixel, $base: $hill-text-root) {
    @return stripUnit($pixel) / stripUnit($base) * 1rem;
}



//
// Gets z-index value which was defined in the hill layer list.
// @param  {String} $alias Alias of the z-index
// @return {String} Return the calculated z-index value.
// @example
//    .modal {
//        position: absolute;
//        z-index: @layer('modal');
//    }
//    .page {
//        position: absolute;
//        z-index: @layer('page');
//    }
//
//    $hill-layers: (
//        'modal',
//        'page'
//    );
//    Output:
//    .modal -> z-index: 2
//    .page -> z-index: 1
//
//    $hill-layers: (
//        'highest',
//        'center',
//        'lowest'
//    );
//    Output:
//    .highest -> z-index: 3
//    .center -> z-index: 2
//    .lowest -> z-index: 1
//
@function layer($alias) {
    @return ((length($hill-layers) - index($hill-layers, $alias)) + 1);
}
