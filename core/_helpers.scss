//
// NOTE: This helpers can used in your code to access the hill functionality/api.
//       Hill itself depends on this helpers, so do not change this functions
//

//
// Return the font size of the given key
// @param   {String} $property
// @return  {String} Font size
// @Example
//           .example {
//               font-size: textSizeIs('small')
//           }
//
@function textSizeIs ($property) {
    @return map-get($hill-text-sizes, $property);
}

//
// Return content with the representive media query wrap
// @param  {String} $screens    Exact, greater than, lower that or ranges
//                              of breakpoints (see examples)
// @return {CSS}                CSS contents with inside of
//                              the given media query
// @Example
//
//           // 1) Simple MediaQuery for small screens only
//           .example {
//               color: blue;
//
//               @include layoutFor('small') {
//                   color: red;
//               }
//           }
//
//           // 2) MediaQuery for screensizes greater than `small` breakpoint
//           .example {
//               color: blue;
//
//               @include layoutFor('>small') {
//                   color: red;
//               }
//           }
//
//           // 3) MediaQuery for screensizes smaller than `large` breakpoint
//           .example {
//               color: blue;
//
//               @include layoutFor('<large') {
//                   color: red;
//               }
//           }
//
//           // 4) MediaQuery for screensizes between `small`
//           //    and `large` breakpoints
//           .example {
//               color: blue;
//
//               @include layoutFor('>small', '<large') {
//                   color: red;
//               }
//           }
//
@mixin layoutFor ($screens...) {
    @if global-variable-exists(hill-layout-breakpoints) {
        $length: length($screens);

        @if ($length == 1) {
            $param:     nth($screens, 1);
            $condition: 'max-width';
            $char:      getFirstChar($param);

            @if (equalOnce($char, '<', '>')) {
                $param: removeFirstChar($param);

                @if (equalOnce($char, '>')) {
                    $condition: 'min-width';
                }
            }

            @if($hill-layout-use-classes-instead-queries == false) {
                @media (#{$condition}: #{map-get($hill-layout-breakpoints, $param)}) {
                    @content;
                }
            } @else {
                .device-is--#{nth($screens, 1)} {
                    @content;
                }
            }
        } @else if ($length == 2) {
            $param1: nth($screens, 1);
            $param2: nth($screens, 2);
            $min: null;
            $max: null;

            @if (equalOnce(getFirstChar($param1), '<', '>')) {
                $param1: removeFirstChar($param1);
            }

            $param1: map-get($hill-layout-breakpoints, $param1);

            @if (equalOnce(getFirstChar($param2), '<', '>')) {
                $param2: removeFirstChar($param2);
            }

            $param2: map-get($hill-layout-breakpoints, $param2);

            @if ($param1 > $param2) {
                $max: $param1;
                $min: $param2;
            } @else {
                $max: $param2;
                $min: $param1;
            }

            @media (min-width: #{$min}) and
                   (max-width: #{$max}) {
                @content;
            }
        } @else {
            @warn "More than two parameters given";
        }
    }
}
