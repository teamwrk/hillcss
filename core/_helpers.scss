//
// NOTE: This helpers can used in your code to access the hill functionality/api.
//       Hill itself depends on this helpers, so do not change this functions
//

//
// Return the font size of the given key
// @param   {String} $property
// @return  {String} Font size
// @Example
//           .example {
//               font-size: textIs('small')
//           }
//
@function textIs ($property) {
    @return map-get($hill-text-sizes, $property);
}



//
// Return content with the representive media query wrap
// @param  {String} $screens    Exact, greater than, lower that or ranges
//                              of breakpoints (see examples)
// @return {CSS}                CSS contents with inside of
//                              the given media query
// @Example
//
//           // 1) Simple MediaQuery for small screens only
//           .example {
//               color: blue;
//
//               @include is('small') {
//                   color: red;
//               }
//           }
//
//           // 2) MediaQuery for screensizes greater than `small` breakpoint
//           .example {
//               color: blue;
//
//               @include deviceIs('>small') {
//                   color: red;
//               }
//           }
//
//           // 3) MediaQuery for screensizes smaller than `large` breakpoint
//           .example {
//               color: blue;
//
//               @include deviceIs('<large') {
//                   color: red;
//               }
//           }
//
//           // 4) MediaQuery for screensizes between `small`
//           //    and `large` breakpoints
//           .example {
//               color: blue;
//
//               @include deviceIs('>small', '<large') {
//                   color: red;
//               }
//           }
//
@mixin deviceIs ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {

        // Defaults for first parameter and condition
        $breakpoint: map-get($hill-layout-breakpoints, $device);

        @if($hill-layout-classes-as-breaktpoints == false) {
            @if (map-get-first-key($hill-layout-breakpoints) == $device) {
                @media (max-width: #{$breakpoint}) {
                    @content;
                }
            } @else {
                @media (min-width: #{map-get-previous($hill-layout-breakpoints, $device) + 1}) and
                       (max-width: #{$breakpoint}) {
                    @content;
                }
            }

        } @else {
            .device-is--#{$device} {
                @content;
            }
        }
    }
}

@mixin deviceMin ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (min-width: #{map-get($hill-layout-breakpoints, $device) + 1}) {
            @content;
        }
    }
}

@mixin deviceMax ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (max-width: #{map-get($hill-layout-breakpoints, $device)}) {
            @content;
        }
    }
}

@mixin deviceBetween ($deviceMin, $deviceMax) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (min-width: #{map-get($hill-layout-breakpoints, $deviceMin) + 1})
            and (max-width: #{map-get($hill-layout-breakpoints, $deviceMax)}) {
            @content;
        }
    }
}
