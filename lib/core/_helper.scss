@import '../config';

//
// Added to reduce css output
//
%_clearfix {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

//
// Splits the given fraction string into two parts and returnx
// them as a map
// @param  {String} $fraction The fraction string like '1/2'
// @return {Object}           A map with counter and denominator
//                            would be returned, if valid fraction
//                            is given. Otherwise null.
//
@function explode-fraction ($fraction) {
    $delimiterPos: str-index($fraction, '/');
    $result: null;

    @if($delimiterPos) {
        $length: str-length($fraction);

        // Gets the counter of the fraction - 1/2
        //                                    ^
        $counter: str-slice($fraction, 1, $delimiterPos);

        // Gets the denominator of the fraction - 1/2
        //                                          ^
        $denominator: str-slice($fraction, ($delimiterPos + 1), $length);

        $result: (to-number($counter), to-number($denominator));
    }

    @return $result;
}

//
// Transform a fraction map to percent representation
// @param  {String} $fraction The fraction map like (1, 2)
// @return {Number}           Percent representation of the given
//                            fraction. Default is 100%.
//
@function fraction-to-percent ($fraction) {
    // Split fraction into map e.g. 1/2 -> (1, 2)
    $fractionMap: explode-fraction($fraction);

    // Default width
    $result: 100;

    @if($fractionMap) {
        $counter:     nth($fractionMap, 1);
        $denominator: nth($fractionMap, 2);

        // Fraction in percentage e.g. 1/2 -> 50
        $calcedValue: ((100 / $denominator) * $counter);

        @if($hill-layout-boxes-space > 0) {
            // Spaces between boxes.
            // E.g. 3 possible spaces between 4 boxes,
            // because last space is not needed
            $spaceCount: $denominator - 1;

            // Calculate the correct space size, that we can combine
            // box size with space size to get always 100% total width.
            $spaceSize: (($hill-layout-boxes-space * $spaceCount) / $denominator);
            $result:    #{$calcedValue - $spaceSize};
        } @else {
            $result: #{$calcedValue};
        }
    }

    @return #{$result};
}

//
// Casts a string into a number
// @param  {String} $string Value to be parsed
// @return {Number}         Casted number
//
@function to-number ($string) {
    $length: str-length($string);
    $result: 0;
    $digits: 0;
    $numbers: (
        '0': 0, '1': 1, '2': 2,
        '3': 3, '4': 4, '5': 5,
        '6': 6, '7': 7, '8': 8,
        '9': 9
    );

  @for $i from 1 through str-length($string) {
    $character: str-slice($string, $i, $i);

    @if not (index(map-keys($numbers), $character)) {
      @return $result;
    }

    @if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return $result;
}

//
// Return the first character of a string
// @param  {String} $string
// @return {String}
//
@function get-first-char ($string) {
    @if (type-of($string) == string) {
        @return str_slice($string, 1, 1);
    } @else {
        @return null;
    }
}

//
// Remove the first character of a string
// and return it
// @param  {String} $string
// @return {String}
//
@function remove-first-char ($string) {
    @return str_slice($string, 2, -(length($string)));
}

//
// Returns if a string is equal to a list of
// matcher Strings
// @param  {String} $string         String to test
// @param  {List}   $matchers...    List of Strings to test against
// @return {Boolean}                True or false if it matches.
//
@function equal-once ($string, $matchers...) {
    @each $matcher in $matchers {
        @if ($string == $matcher) {
            @return true;
        }
    }

    @return false;
}

//
// Gets the previous item from given map relative to given item
// @param  {Object}  $map     Map with keys and values
// @param  {String}  $fromKey From key
// @return {Boolean} Return the previous item, relative to given from item.
//
@function map-get-previous ($map, $fromKey) {
    $currentIndex: 0;

    @each $map-key, $map-value in $map {
        $currentIndex: $currentIndex + 1;

        @if (($map-key == $fromKey) and ($currentIndex > 1)) {
            @return nth(nth($map, $currentIndex - 1), 2);
        }
    }

    @return null;
}

//
// Gets the next item from given map relative to given item
// @param  {Object}  $map     Map with keys and values
// @param  {String}  $fromKey From key
// @return {Boolean} Return the next item, relative to given from item.
//
@function map-get-next ($map, $fromKey) {
    $currentIndex: 0;

    @each $map-key, $map-value in $map {
        $currentIndex: $currentIndex + 1;

        @if (($map-key == $fromKey) and ($currentIndex < length($map))) {
            @return nth(nth($map, $currentIndex + 1), 2);
        }
    }

    @return null;
}

//
// Gets the first key of the given map
// @param  {Object} $map Map with keys and values
// @return {String} Return the first key name of the map.
//
@function map-get-first-key ($map) {
    @return nth(nth($map, 1), 1);
}

//
// Gets the last key of the given map
// @param  {Object} $map Map with keys and values
// @return {String} Return the last key name of the map.
//
@function map-get-last-key ($map) {
    @return nth(nth($map, length($map)), 1);
}

//
// Returns the number without unit. E.g. 30px -> 30
// @param  {String} $val
// @return {Number}
// @hint Borrowed from Zurb Foundation _globals.scss
//
@function strip-unit($val) {
    @return $val / ($val * 0 + 1);
}
