@import 'helpers';

//
// Generates general helpers
//
@if ($hill-layout-css-general) {
    @for $index from 1 through $hill-layout-space-multiplier {
        @if $index > 1 {
            $multiplier: "-#{$index}x";
        } @else {
            $multiplier: '';
        }

        [#{$hill-layout-attribute-name}*="space-top#{$multiplier}"]       { margin-top:    #{$hill-layout-space * $index}; }
        [#{$hill-layout-attribute-name}*="space-right#{$multiplier}"]     { margin-right:  #{$hill-layout-space * $index}; }
        [#{$hill-layout-attribute-name}*="space-bottom#{$multiplier}"]    { margin-bottom: #{$hill-layout-space * $index}; }
        [#{$hill-layout-attribute-name}*="space-left#{$multiplier}"]      { margin-left:   #{$hill-layout-space * $index}; }
    }

    [#{$hill-layout-attribute-name}*="float-left"]     { float:   left; }
    [#{$hill-layout-attribute-name}*="float-right"]    { float:   right; }
    [#{$hill-layout-attribute-name}*="hide"]           { display: none; }
    [#{$hill-layout-attribute-name}*="clear"]          { @extend  %_clearfix; }
}

//
// Generates boxes and rows
//
@if ($hill-layout-css-box) {
    //
    // Generates box width attributes
    // -> box-1/2, box-1/3 ...
    //
    @each $width in $hill-layout-boxes {
        [#{$hill-layout-attribute-name}*="box-#{$width}"] {
            width: fractionToPercent($width);
        }
    }

    //
    // Generates box row to float boxes inside
    //
    [#{$hill-layout-attribute-name}*="row"]  {
        & > [#{$hill-layout-attribute-name}*="box-"] {
            float: left;
        }

        @extend %_clearfix;
    }

    @if(stripUnit($hill-layout-boxes-space) > 0) {
        [#{$hill-layout-attribute-name}*="box-"] {
            display: block;

            &:not(:last-child) {
                margin-right: #{$hill-layout-boxes-space};
            }
        }
    }
}


//
// Generates box breakpoints with relevant width sizes
//
@if ($hill-layout-css-responsive) {
    @if(stripUnit($hill-layout-boxes-space) > 0) {
        [#{$hill-layout-attribute-name}*="device-"] {
            display: block;

            &:not(:last-child) {
                margin-right: #{$hill-layout-boxes-space};
            }
        }
    }

    @each $breakpoint in $hill-layout-breakpoints {
        $breakpointName: nth($breakpoint, 1);

        // -> box-small-1/2, box-medium-1/2 ...
        @each $width in $hill-layout-boxes {
            @include deviceIs ($breakpointName) {
                [#{$hill-layout-attribute-name}*="device-#{$breakpointName}-#{$width}"] {
                    width: fractionToPercent($width);
                }
            };
        }

        // -> box-small-0
        @include deviceIs ($breakpointName) {
            [#{$hill-layout-attribute-name}*="device-#{$breakpointName}-0"] {
                // Tried to exclude this into a placeholder. But this after that
                // this selector is not rendered inside a media query condition
                display: none;
            }
        }
    }
}
