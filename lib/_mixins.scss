//
// Return content with the representive media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @example
//           // Simple MediaQuery for small screens only
//           .example {
//               color: blue;
//
//               @include deviceIs(small) {
//                   color: red;
//               }
//           }
//
@mixin deviceIs ($device) {
    @if global-variable-exists(hill-responsive-breakpoints) {
        // Defaults for first parameter and condition
        $breakpoint: map-get($hill-responsive-breakpoints, $device);

        @if (mapGetFirstKey($hill-responsive-breakpoints) == $device) {
            @media (max-width: #{$breakpoint}) {
                @content;
            }
        } @else {
            @media (min-width: #{mapGetPrevious($hill-responsive-breakpoints, $device) + 1}) and
                   (max-width: #{$breakpoint}) {
                @content;
            }
        }
    }
}



//
// Return content with the representive min width media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @Example
//           // Simple MediaQuery for min small devices
//           .example {
//               @include deviceMin(small) {
//                   color: red;
//               }
//           }
//
@mixin deviceMin ($device) {
    @if global-variable-exists(hill-responsive-breakpoints) {
        @media (min-width: #{map-get($hill-responsive-breakpoints, $device) + 1}) {
            @content;
        }
    }
}



//
// Return content with the representive max width media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @Example
//           // Simple MediaQuery for max large devices
//           .example {
//               @include deviceMax(large) {
//                   color: red;
//               }
//           }
//
@mixin deviceMax ($device) {
    @if global-variable-exists(hill-responsive-breakpoints) {
        @media (max-width: #{map-get($hill-responsive-breakpoints, $device)}) {
            @content;
        }
    }
}



//
// Return content with the representive media query wrap between two breakpoints
// @param  {String} $deviceMin The min device breakpoint definition
// @param  {String} $deviceMax The max device breakpoint definition
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @Example
//           // Simple MediaQuery for max large devices
//           .example {
//               @include deviceBetween(medium, large) {
//                   color: red;
//               }
//           }
//
@mixin deviceBetween ($deviceMin, $deviceMax) {
    @if global-variable-exists(hill-responsive-breakpoints) {
        @media (min-width: #{map-get($hill-responsive-breakpoints, $deviceMin) + 1})
            and (max-width: #{map-get($hill-responsive-breakpoints, $deviceMax)}) {
            @content;
        }
    }
}
