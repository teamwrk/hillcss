//
// Return content with the representive media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @example                 Documentation 3.6
//
@mixin hill-device-is ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {

        // Defaults for first parameter and condition
        $breakpoint: map-get($hill-layout-breakpoints, $device);

        @if (map-get-first-key($hill-layout-breakpoints) == $device) {
            @media (max-width: #{$breakpoint}) {
                @content;
            }
        } @else {
            @media (min-width: #{map-get-previous($hill-layout-breakpoints, $device) + 1}) and
                   (max-width: #{$breakpoint}) {
                @content;
            }
        }
    }
}

//
// Return content with the representive min width media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @example                 Documentation 3.6
//
@mixin hill-device-min ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (min-width: #{map-get($hill-layout-breakpoints, $device) + 1}) {
            @content;
        }
    }
}

//
// Return content with the representive max width media query wrap
// @param  {String} $device The device breakpoint definition for the media query
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @example                 Documentation 3.6
//
@mixin hill-device-max ($device) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (max-width: #{map-get($hill-layout-breakpoints, $device)}) {
            @content;
        }
    }
}

//
// Return content with the representive media query wrap between two breakpoints
// @param  {String} $deviceMin The min device breakpoint definition
// @param  {String} $deviceMax The max device breakpoint definition
// @return {CSS}            CSS contents with inside of
//                          the given media query
// @example                 Documentation 3.6
//
@mixin hill-device-between ($deviceMin, $deviceMax) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @media (min-width: #{map-get($hill-layout-breakpoints, $deviceMin) + 1})
            and (max-width: #{map-get($hill-layout-breakpoints, $deviceMax)}) {
            @content;
        }
    }
}
