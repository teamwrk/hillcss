$_layoutAttrName: hill-layout;


//
// Private Mixins --------------------------------------------------------------
//

@function _getFirstChar ($string) {
    @return str_slice($string, 1, 1);
}

@function _removeFirstChar ($string) {
    @return str_slice($string, 2, -(length($string)));
}

@function _equalOnce ($string, $matchers...) {
    @each $matcher in $matchers {
        @if ($string == $matcher) {
            @return true;
        }
    }

    @return false;
}





//
// Public Mixins ---------------------------------------------------------------
//

@mixin layoutFor ($screens...) {
    @if global-variable-exists(hill-layout-breakpoints) {
        $length: length($screens);

        @if ($length == 1) {
            $param:     nth($screens, 1);
            $condition: 'max-width';
            $char:      _getFirstChar($param);

            @if (_equalOnce($char, '<', '>')) {
                $param: _removeFirstChar($param);

                @if (_equalOnce($char, '>')) {
                    $condition: 'min-width';
                }
            }

            @media (#{$condition}: #{map-get($hill-layout-breakpoints, $param)}) {
                @content;
            }
        }
        @else if ($length == 2) {
            $param1: nth($screens, 1);
            $param2: nth($screens, 2);
            $min: null;
            $max: null;

            @if (_equalOnce(_getFirstChar($param1), '<', '>')) {
                $param1: _removeFirstChar($param1);
            }
            $param1: map-get($hill-layout-breakpoints, $param1);

            @if (_equalOnce(_getFirstChar($param2), '<', '>')) {
                $param2: _removeFirstChar($param2);
            }
            $param2: map-get($hill-layout-breakpoints, $param2);

            @if ($param1 > $param2) {
                $max: $param1;
                $min: $param2;
            }@else {
                $max: $param2;
                $min: $param1;
            }

            @media (min-width: #{$min}) and
                   (max-width: #{$max}) {
                @content;
            }
        }
        @else {
            @warn "More than two parameters given";
        }
    }
}





//
// Global Layout Classes And Attributes ----------------------------------------
//

// Generates container width attributes for layouting
@if global-variable-exists(hill-layout-widths) {
    @each $width in $hill-layout-widths {
        [#{$_layoutAttrName}*="#{$width}"] {
            width: #{$width + '%'};
        }

        @if global-variable-exists(hill-layout-min-max-width) {
            @if($hill-layout-min-max-width) {
                [#{$_layoutAttrName}*="<#{$width}"] {
                    min-width: #{$width + '%'};
                }

                [#{$_layoutAttrName}*=">#{$width}"] {
                    max-width: #{$width + '%'};
                }
            }
        }
    }
}

@if global-variable-exists(hill-layout-breakpoint-width) {
    @if ($hill-layout-breakpoint-width) {
        @each $breakpoint in $hill-layout-breakpoints {
            $breakpointName: nth($breakpoint, 1);

            @each $width in $hill-layout-widths {
                @include layoutFor ($breakpointName) {
                    [#{$_layoutAttrName}*="#{$breakpointName}-#{$width}"] {
                        width: #{$width + '%'};
                    }
                };
            }
        }
    }
}

[#{$_layoutAttrName}*="left"]  {float:   left;}
[#{$_layoutAttrName}*="right"] {float:   right;}
[#{$_layoutAttrName}*="hide"]  {display: none;}

@if global-variable-exists(hill-layout-space) {
    [#{$_layoutAttrName}*="space-top"]    { margin-top:    $hill-layout-space; }
    [#{$_layoutAttrName}*="space-right"]  { margin-right:  $hill-layout-space; }
    [#{$_layoutAttrName}*="space-bottom"] { margin-bottom: $hill-layout-space; }
    [#{$_layoutAttrName}*="space-left"]   { margin-left:   $hill-layout-space; }
}

[#{$_layoutAttrName}*="clearfix"]  {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}
