$_layoutAttrName: hill-layout;


//
// Global Layout Mixins --------------------------------------------------------
//

@mixin layoutFor ($deviceType) {
    @if global-variable-exists(hill-layout-breakpoints) {
        @if map-has-key($hill-layout-breakpoints, $deviceType) {
            @media (max-width: #{map-get($hill-layout-breakpoints, $deviceType)}) {
                @content;
            }
        }
        @else {
            @warn "Device type -> #{$breakpoint} does not exists.";
        }
    }
}





//
// Global Layout Classes And Attributes ----------------------------------------
//

// Generates container width attributes for layouting
@if global-variable-exists(hill-layout-widths) {
    @each $width in $hill-layout-widths {
        [#{$_layoutAttrName}*="#{$width}"] {
            width: #{$width + '%'};
        }
    }
}

[#{$_layoutAttrName}*="left"]  {float:   left;}
[#{$_layoutAttrName}*="right"] {float:   right;}
[#{$_layoutAttrName}*="hide"]  {display: none;}

// Spaces
@if global-variable-exists(hill-layout-space) {
    [#{$_layoutAttrName}*="space-top"]    { margin-top:    $hill-layout-space; }
    [#{$_layoutAttrName}*="space-right"]  { margin-right:  $hill-layout-space; }
    [#{$_layoutAttrName}*="space-bottom"] { margin-bottom: $hill-layout-space; }
    [#{$_layoutAttrName}*="space-left"]   { margin-left:   $hill-layout-space; }
}

[#{$_layoutAttrName}*="clearfix"]  {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

[#{$_layoutAttrName}*="stretch"]  {
    position: absolute;
    top:    0;
    right:  0;
    bottom: 0;
    left:   0;
}
